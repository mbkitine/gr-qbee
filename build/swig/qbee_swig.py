# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_qbee_swig', [dirname(__file__)])
        except ImportError:
            import _qbee_swig
            return _qbee_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_qbee_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _qbee_swig = swig_import_helper()
    del swig_import_helper
else:
    import _qbee_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _qbee_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _qbee_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _qbee_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _qbee_swig.high_res_timer_epoch()
class qbee_demodulator_fsk(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of qbee::qbee_demodulator_fsk.

    To avoid accidental use of raw pointers, qbee::qbee_demodulator_fsk's constructor is in a private implementation class. qbee::qbee_demodulator_fsk::make is the public interface for creating new instances.

    Args:
        sps : 
        modulation_index : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sps, modulation_index):
        """
        make(float sps, float modulation_index) -> qbee_demodulator_fsk_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of qbee::qbee_demodulator_fsk.

        To avoid accidental use of raw pointers, qbee::qbee_demodulator_fsk's constructor is in a private implementation class. qbee::qbee_demodulator_fsk::make is the public interface for creating new instances.

        Args:
            sps : 
            modulation_index : 
        """
        return _qbee_swig.qbee_demodulator_fsk_make(sps, modulation_index)

    make = staticmethod(make)
    __swig_destroy__ = _qbee_swig.delete_qbee_demodulator_fsk
    __del__ = lambda self: None
qbee_demodulator_fsk_swigregister = _qbee_swig.qbee_demodulator_fsk_swigregister
qbee_demodulator_fsk_swigregister(qbee_demodulator_fsk)

def qbee_demodulator_fsk_make(sps, modulation_index):
    """
    qbee_demodulator_fsk_make(float sps, float modulation_index) -> qbee_demodulator_fsk_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of qbee::qbee_demodulator_fsk.

    To avoid accidental use of raw pointers, qbee::qbee_demodulator_fsk's constructor is in a private implementation class. qbee::qbee_demodulator_fsk::make is the public interface for creating new instances.

    Args:
        sps : 
        modulation_index : 
    """
    return _qbee_swig.qbee_demodulator_fsk_make(sps, modulation_index)

class qbee_demodulator_fsk_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::qbee::qbee_demodulator_fsk)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::qbee::qbee_demodulator_fsk)> self) -> qbee_demodulator_fsk_sptr
        __init__(boost::shared_ptr<(gr::qbee::qbee_demodulator_fsk)> self, qbee_demodulator_fsk p) -> qbee_demodulator_fsk_sptr
        """
        this = _qbee_swig.new_qbee_demodulator_fsk_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(qbee_demodulator_fsk_sptr self) -> qbee_demodulator_fsk"""
        return _qbee_swig.qbee_demodulator_fsk_sptr___deref__(self)

    __swig_destroy__ = _qbee_swig.delete_qbee_demodulator_fsk_sptr
    __del__ = lambda self: None

    def make(self, sps, modulation_index):
        """
        make(qbee_demodulator_fsk_sptr self, float sps, float modulation_index) -> qbee_demodulator_fsk_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of qbee::qbee_demodulator_fsk.

        To avoid accidental use of raw pointers, qbee::qbee_demodulator_fsk's constructor is in a private implementation class. qbee::qbee_demodulator_fsk::make is the public interface for creating new instances.

        Args:
            sps : 
            modulation_index : 
        """
        return _qbee_swig.qbee_demodulator_fsk_sptr_make(self, sps, modulation_index)


    def primitive_connect(self, *args):
        """
        primitive_connect(qbee_demodulator_fsk_sptr self, basic_block_sptr block)
        primitive_connect(qbee_demodulator_fsk_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _qbee_swig.qbee_demodulator_fsk_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(qbee_demodulator_fsk_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(qbee_demodulator_fsk_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _qbee_swig.qbee_demodulator_fsk_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(qbee_demodulator_fsk_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(qbee_demodulator_fsk_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _qbee_swig.qbee_demodulator_fsk_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(qbee_demodulator_fsk_sptr self, basic_block_sptr block)
        primitive_disconnect(qbee_demodulator_fsk_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _qbee_swig.qbee_demodulator_fsk_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(qbee_demodulator_fsk_sptr self)"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_disconnect_all(self)


    def lock(self):
        """lock(qbee_demodulator_fsk_sptr self)"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_lock(self)


    def unlock(self):
        """unlock(qbee_demodulator_fsk_sptr self)"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(qbee_demodulator_fsk_sptr self, swig_int_ptr port_id)"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(qbee_demodulator_fsk_sptr self, swig_int_ptr port_id)"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(qbee_demodulator_fsk_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(qbee_demodulator_fsk_sptr self)"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(qbee_demodulator_fsk_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(qbee_demodulator_fsk_sptr self, int i) -> size_t"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(qbee_demodulator_fsk_sptr self, size_t max_output_buffer)
        set_max_output_buffer(qbee_demodulator_fsk_sptr self, int port, size_t max_output_buffer)
        """
        return _qbee_swig.qbee_demodulator_fsk_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(qbee_demodulator_fsk_sptr self, int i) -> size_t"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(qbee_demodulator_fsk_sptr self, size_t min_output_buffer)
        set_min_output_buffer(qbee_demodulator_fsk_sptr self, int port, size_t min_output_buffer)
        """
        return _qbee_swig.qbee_demodulator_fsk_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(qbee_demodulator_fsk_sptr self) -> hier_block2_sptr"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_to_hier_block2(self)


    def name(self):
        """name(qbee_demodulator_fsk_sptr self) -> std::string"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_name(self)


    def symbol_name(self):
        """symbol_name(qbee_demodulator_fsk_sptr self) -> std::string"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(qbee_demodulator_fsk_sptr self) -> io_signature_sptr"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(qbee_demodulator_fsk_sptr self) -> io_signature_sptr"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(qbee_demodulator_fsk_sptr self) -> long"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(qbee_demodulator_fsk_sptr self) -> basic_block_sptr"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(qbee_demodulator_fsk_sptr self, int ninputs, int noutputs) -> bool"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(qbee_demodulator_fsk_sptr self) -> std::string"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(qbee_demodulator_fsk_sptr self, std::string name)"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(qbee_demodulator_fsk_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _qbee_swig.qbee_demodulator_fsk_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(qbee_demodulator_fsk_sptr self) -> swig_int_ptr"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(qbee_demodulator_fsk_sptr self) -> swig_int_ptr"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(qbee_demodulator_fsk_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _qbee_swig.qbee_demodulator_fsk_sptr_message_subscribers(self, which_port)

qbee_demodulator_fsk_sptr_swigregister = _qbee_swig.qbee_demodulator_fsk_sptr_swigregister
qbee_demodulator_fsk_sptr_swigregister(qbee_demodulator_fsk_sptr)


qbee_demodulator_fsk_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
qbee_demodulator_fsk = qbee_demodulator_fsk.make;

class qbee_nrzi_decoder(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of qbee::qbee_nrzi_decoder.

    To avoid accidental use of raw pointers, qbee::qbee_nrzi_decoder's constructor is in a private implementation class. qbee::qbee_nrzi_decoder::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> qbee_nrzi_decoder_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of qbee::qbee_nrzi_decoder.

        To avoid accidental use of raw pointers, qbee::qbee_nrzi_decoder's constructor is in a private implementation class. qbee::qbee_nrzi_decoder::make is the public interface for creating new instances.
        """
        return _qbee_swig.qbee_nrzi_decoder_make()

    make = staticmethod(make)
    __swig_destroy__ = _qbee_swig.delete_qbee_nrzi_decoder
    __del__ = lambda self: None
qbee_nrzi_decoder_swigregister = _qbee_swig.qbee_nrzi_decoder_swigregister
qbee_nrzi_decoder_swigregister(qbee_nrzi_decoder)

def qbee_nrzi_decoder_make():
    """
    qbee_nrzi_decoder_make() -> qbee_nrzi_decoder_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of qbee::qbee_nrzi_decoder.

    To avoid accidental use of raw pointers, qbee::qbee_nrzi_decoder's constructor is in a private implementation class. qbee::qbee_nrzi_decoder::make is the public interface for creating new instances.
    """
    return _qbee_swig.qbee_nrzi_decoder_make()

class qbee_nrzi_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::qbee::qbee_nrzi_decoder)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::qbee::qbee_nrzi_decoder)> self) -> qbee_nrzi_decoder_sptr
        __init__(boost::shared_ptr<(gr::qbee::qbee_nrzi_decoder)> self, qbee_nrzi_decoder p) -> qbee_nrzi_decoder_sptr
        """
        this = _qbee_swig.new_qbee_nrzi_decoder_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(qbee_nrzi_decoder_sptr self) -> qbee_nrzi_decoder"""
        return _qbee_swig.qbee_nrzi_decoder_sptr___deref__(self)

    __swig_destroy__ = _qbee_swig.delete_qbee_nrzi_decoder_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(qbee_nrzi_decoder_sptr self) -> qbee_nrzi_decoder_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of qbee::qbee_nrzi_decoder.

        To avoid accidental use of raw pointers, qbee::qbee_nrzi_decoder's constructor is in a private implementation class. qbee::qbee_nrzi_decoder::make is the public interface for creating new instances.
        """
        return _qbee_swig.qbee_nrzi_decoder_sptr_make(self)


    def primitive_connect(self, *args):
        """
        primitive_connect(qbee_nrzi_decoder_sptr self, basic_block_sptr block)
        primitive_connect(qbee_nrzi_decoder_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _qbee_swig.qbee_nrzi_decoder_sptr_primitive_connect(self, *args)


    def primitive_msg_connect(self, *args):
        """
        primitive_msg_connect(qbee_nrzi_decoder_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_connect(qbee_nrzi_decoder_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _qbee_swig.qbee_nrzi_decoder_sptr_primitive_msg_connect(self, *args)


    def primitive_msg_disconnect(self, *args):
        """
        primitive_msg_disconnect(qbee_nrzi_decoder_sptr self, basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)
        primitive_msg_disconnect(qbee_nrzi_decoder_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, std::string dstport)
        """
        return _qbee_swig.qbee_nrzi_decoder_sptr_primitive_msg_disconnect(self, *args)


    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(qbee_nrzi_decoder_sptr self, basic_block_sptr block)
        primitive_disconnect(qbee_nrzi_decoder_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)
        """
        return _qbee_swig.qbee_nrzi_decoder_sptr_primitive_disconnect(self, *args)


    def disconnect_all(self):
        """disconnect_all(qbee_nrzi_decoder_sptr self)"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_disconnect_all(self)


    def lock(self):
        """lock(qbee_nrzi_decoder_sptr self)"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_lock(self)


    def unlock(self):
        """unlock(qbee_nrzi_decoder_sptr self)"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_unlock(self)


    def primitive_message_port_register_hier_in(self, port_id):
        """primitive_message_port_register_hier_in(qbee_nrzi_decoder_sptr self, swig_int_ptr port_id)"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_primitive_message_port_register_hier_in(self, port_id)


    def primitive_message_port_register_hier_out(self, port_id):
        """primitive_message_port_register_hier_out(qbee_nrzi_decoder_sptr self, swig_int_ptr port_id)"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_primitive_message_port_register_hier_out(self, port_id)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(qbee_nrzi_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(qbee_nrzi_decoder_sptr self)"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(qbee_nrzi_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_processor_affinity(self)


    def max_output_buffer(self, i):
        """max_output_buffer(qbee_nrzi_decoder_sptr self, int i) -> size_t"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(qbee_nrzi_decoder_sptr self, size_t max_output_buffer)
        set_max_output_buffer(qbee_nrzi_decoder_sptr self, int port, size_t max_output_buffer)
        """
        return _qbee_swig.qbee_nrzi_decoder_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(qbee_nrzi_decoder_sptr self, int i) -> size_t"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(qbee_nrzi_decoder_sptr self, size_t min_output_buffer)
        set_min_output_buffer(qbee_nrzi_decoder_sptr self, int port, size_t min_output_buffer)
        """
        return _qbee_swig.qbee_nrzi_decoder_sptr_set_min_output_buffer(self, *args)


    def to_hier_block2(self):
        """to_hier_block2(qbee_nrzi_decoder_sptr self) -> hier_block2_sptr"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_to_hier_block2(self)


    def name(self):
        """name(qbee_nrzi_decoder_sptr self) -> std::string"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_name(self)


    def symbol_name(self):
        """symbol_name(qbee_nrzi_decoder_sptr self) -> std::string"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(qbee_nrzi_decoder_sptr self) -> io_signature_sptr"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(qbee_nrzi_decoder_sptr self) -> io_signature_sptr"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(qbee_nrzi_decoder_sptr self) -> long"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(qbee_nrzi_decoder_sptr self) -> basic_block_sptr"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(qbee_nrzi_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(qbee_nrzi_decoder_sptr self) -> std::string"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(qbee_nrzi_decoder_sptr self, std::string name)"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(qbee_nrzi_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _qbee_swig.qbee_nrzi_decoder_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(qbee_nrzi_decoder_sptr self) -> swig_int_ptr"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(qbee_nrzi_decoder_sptr self) -> swig_int_ptr"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(qbee_nrzi_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _qbee_swig.qbee_nrzi_decoder_sptr_message_subscribers(self, which_port)

qbee_nrzi_decoder_sptr_swigregister = _qbee_swig.qbee_nrzi_decoder_sptr_swigregister
qbee_nrzi_decoder_sptr_swigregister(qbee_nrzi_decoder_sptr)


qbee_nrzi_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
qbee_nrzi_decoder = qbee_nrzi_decoder.make;

class qbee_deframer(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of qbee::qbee_deframer.

    To avoid accidental use of raw pointers, qbee::qbee_deframer's constructor is in a private implementation class. qbee::qbee_deframer::make is the public interface for creating new instances.

    Args:
        length_min : 
        length_max : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(length_min=32, length_max=500):
        """
        make(int length_min=32, int length_max=500) -> qbee_deframer_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of qbee::qbee_deframer.

        To avoid accidental use of raw pointers, qbee::qbee_deframer's constructor is in a private implementation class. qbee::qbee_deframer::make is the public interface for creating new instances.

        Args:
            length_min : 
            length_max : 
        """
        return _qbee_swig.qbee_deframer_make(length_min, length_max)

    make = staticmethod(make)
    __swig_destroy__ = _qbee_swig.delete_qbee_deframer
    __del__ = lambda self: None
qbee_deframer_swigregister = _qbee_swig.qbee_deframer_swigregister
qbee_deframer_swigregister(qbee_deframer)

def qbee_deframer_make(length_min=32, length_max=500):
    """
    qbee_deframer_make(int length_min=32, int length_max=500) -> qbee_deframer_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of qbee::qbee_deframer.

    To avoid accidental use of raw pointers, qbee::qbee_deframer's constructor is in a private implementation class. qbee::qbee_deframer::make is the public interface for creating new instances.

    Args:
        length_min : 
        length_max : 
    """
    return _qbee_swig.qbee_deframer_make(length_min, length_max)

class qbee_deframer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::qbee::qbee_deframer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::qbee::qbee_deframer)> self) -> qbee_deframer_sptr
        __init__(boost::shared_ptr<(gr::qbee::qbee_deframer)> self, qbee_deframer p) -> qbee_deframer_sptr
        """
        this = _qbee_swig.new_qbee_deframer_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(qbee_deframer_sptr self) -> qbee_deframer"""
        return _qbee_swig.qbee_deframer_sptr___deref__(self)

    __swig_destroy__ = _qbee_swig.delete_qbee_deframer_sptr
    __del__ = lambda self: None

    def make(self, length_min=32, length_max=500):
        """
        make(qbee_deframer_sptr self, int length_min=32, int length_max=500) -> qbee_deframer_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of qbee::qbee_deframer.

        To avoid accidental use of raw pointers, qbee::qbee_deframer's constructor is in a private implementation class. qbee::qbee_deframer::make is the public interface for creating new instances.

        Args:
            length_min : 
            length_max : 
        """
        return _qbee_swig.qbee_deframer_sptr_make(self, length_min, length_max)


    def history(self):
        """history(qbee_deframer_sptr self) -> unsigned int"""
        return _qbee_swig.qbee_deframer_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(qbee_deframer_sptr self, int which, int delay)
        declare_sample_delay(qbee_deframer_sptr self, unsigned int delay)
        """
        return _qbee_swig.qbee_deframer_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(qbee_deframer_sptr self, int which) -> unsigned int"""
        return _qbee_swig.qbee_deframer_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(qbee_deframer_sptr self) -> int"""
        return _qbee_swig.qbee_deframer_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(qbee_deframer_sptr self) -> double"""
        return _qbee_swig.qbee_deframer_sptr_relative_rate(self)


    def start(self):
        """start(qbee_deframer_sptr self) -> bool"""
        return _qbee_swig.qbee_deframer_sptr_start(self)


    def stop(self):
        """stop(qbee_deframer_sptr self) -> bool"""
        return _qbee_swig.qbee_deframer_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(qbee_deframer_sptr self, unsigned int which_input) -> uint64_t"""
        return _qbee_swig.qbee_deframer_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(qbee_deframer_sptr self, unsigned int which_output) -> uint64_t"""
        return _qbee_swig.qbee_deframer_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(qbee_deframer_sptr self) -> int"""
        return _qbee_swig.qbee_deframer_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(qbee_deframer_sptr self, int m)"""
        return _qbee_swig.qbee_deframer_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(qbee_deframer_sptr self)"""
        return _qbee_swig.qbee_deframer_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(qbee_deframer_sptr self) -> bool"""
        return _qbee_swig.qbee_deframer_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(qbee_deframer_sptr self, int m)"""
        return _qbee_swig.qbee_deframer_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(qbee_deframer_sptr self) -> int"""
        return _qbee_swig.qbee_deframer_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(qbee_deframer_sptr self, int i) -> long"""
        return _qbee_swig.qbee_deframer_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(qbee_deframer_sptr self, long max_output_buffer)
        set_max_output_buffer(qbee_deframer_sptr self, int port, long max_output_buffer)
        """
        return _qbee_swig.qbee_deframer_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(qbee_deframer_sptr self, int i) -> long"""
        return _qbee_swig.qbee_deframer_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(qbee_deframer_sptr self, long min_output_buffer)
        set_min_output_buffer(qbee_deframer_sptr self, int port, long min_output_buffer)
        """
        return _qbee_swig.qbee_deframer_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(qbee_deframer_sptr self, int which) -> float
        pc_input_buffers_full(qbee_deframer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_deframer_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(qbee_deframer_sptr self, int which) -> float
        pc_input_buffers_full_avg(qbee_deframer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_deframer_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(qbee_deframer_sptr self, int which) -> float
        pc_input_buffers_full_var(qbee_deframer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_deframer_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(qbee_deframer_sptr self, int which) -> float
        pc_output_buffers_full(qbee_deframer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_deframer_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(qbee_deframer_sptr self, int which) -> float
        pc_output_buffers_full_avg(qbee_deframer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_deframer_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(qbee_deframer_sptr self, int which) -> float
        pc_output_buffers_full_var(qbee_deframer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_deframer_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(qbee_deframer_sptr self) -> float"""
        return _qbee_swig.qbee_deframer_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(qbee_deframer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _qbee_swig.qbee_deframer_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(qbee_deframer_sptr self)"""
        return _qbee_swig.qbee_deframer_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(qbee_deframer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _qbee_swig.qbee_deframer_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(qbee_deframer_sptr self) -> int"""
        return _qbee_swig.qbee_deframer_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(qbee_deframer_sptr self) -> int"""
        return _qbee_swig.qbee_deframer_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(qbee_deframer_sptr self, int priority) -> int"""
        return _qbee_swig.qbee_deframer_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(qbee_deframer_sptr self) -> std::string"""
        return _qbee_swig.qbee_deframer_sptr_name(self)


    def symbol_name(self):
        """symbol_name(qbee_deframer_sptr self) -> std::string"""
        return _qbee_swig.qbee_deframer_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(qbee_deframer_sptr self) -> io_signature_sptr"""
        return _qbee_swig.qbee_deframer_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(qbee_deframer_sptr self) -> io_signature_sptr"""
        return _qbee_swig.qbee_deframer_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(qbee_deframer_sptr self) -> long"""
        return _qbee_swig.qbee_deframer_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(qbee_deframer_sptr self) -> basic_block_sptr"""
        return _qbee_swig.qbee_deframer_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(qbee_deframer_sptr self, int ninputs, int noutputs) -> bool"""
        return _qbee_swig.qbee_deframer_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(qbee_deframer_sptr self) -> std::string"""
        return _qbee_swig.qbee_deframer_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(qbee_deframer_sptr self, std::string name)"""
        return _qbee_swig.qbee_deframer_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(qbee_deframer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _qbee_swig.qbee_deframer_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(qbee_deframer_sptr self) -> swig_int_ptr"""
        return _qbee_swig.qbee_deframer_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(qbee_deframer_sptr self) -> swig_int_ptr"""
        return _qbee_swig.qbee_deframer_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(qbee_deframer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _qbee_swig.qbee_deframer_sptr_message_subscribers(self, which_port)

qbee_deframer_sptr_swigregister = _qbee_swig.qbee_deframer_sptr_swigregister
qbee_deframer_sptr_swigregister(qbee_deframer_sptr)


qbee_deframer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
qbee_deframer = qbee_deframer.make;

class qbee_segmentor(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of qbee::qbee_segmentor.

    To avoid accidental use of raw pointers, qbee::qbee_segmentor's constructor is in a private implementation class. qbee::qbee_segmentor::make is the public interface for creating new instances.

    Args:
        frame_length : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frame_length):
        """
        make(int frame_length) -> qbee_segmentor_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of qbee::qbee_segmentor.

        To avoid accidental use of raw pointers, qbee::qbee_segmentor's constructor is in a private implementation class. qbee::qbee_segmentor::make is the public interface for creating new instances.

        Args:
            frame_length : 
        """
        return _qbee_swig.qbee_segmentor_make(frame_length)

    make = staticmethod(make)
    __swig_destroy__ = _qbee_swig.delete_qbee_segmentor
    __del__ = lambda self: None
qbee_segmentor_swigregister = _qbee_swig.qbee_segmentor_swigregister
qbee_segmentor_swigregister(qbee_segmentor)

def qbee_segmentor_make(frame_length):
    """
    qbee_segmentor_make(int frame_length) -> qbee_segmentor_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of qbee::qbee_segmentor.

    To avoid accidental use of raw pointers, qbee::qbee_segmentor's constructor is in a private implementation class. qbee::qbee_segmentor::make is the public interface for creating new instances.

    Args:
        frame_length : 
    """
    return _qbee_swig.qbee_segmentor_make(frame_length)

class qbee_segmentor_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::qbee::qbee_segmentor)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::qbee::qbee_segmentor)> self) -> qbee_segmentor_sptr
        __init__(boost::shared_ptr<(gr::qbee::qbee_segmentor)> self, qbee_segmentor p) -> qbee_segmentor_sptr
        """
        this = _qbee_swig.new_qbee_segmentor_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(qbee_segmentor_sptr self) -> qbee_segmentor"""
        return _qbee_swig.qbee_segmentor_sptr___deref__(self)

    __swig_destroy__ = _qbee_swig.delete_qbee_segmentor_sptr
    __del__ = lambda self: None

    def make(self, frame_length):
        """
        make(qbee_segmentor_sptr self, int frame_length) -> qbee_segmentor_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of qbee::qbee_segmentor.

        To avoid accidental use of raw pointers, qbee::qbee_segmentor's constructor is in a private implementation class. qbee::qbee_segmentor::make is the public interface for creating new instances.

        Args:
            frame_length : 
        """
        return _qbee_swig.qbee_segmentor_sptr_make(self, frame_length)


    def history(self):
        """history(qbee_segmentor_sptr self) -> unsigned int"""
        return _qbee_swig.qbee_segmentor_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(qbee_segmentor_sptr self, int which, int delay)
        declare_sample_delay(qbee_segmentor_sptr self, unsigned int delay)
        """
        return _qbee_swig.qbee_segmentor_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(qbee_segmentor_sptr self, int which) -> unsigned int"""
        return _qbee_swig.qbee_segmentor_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(qbee_segmentor_sptr self) -> int"""
        return _qbee_swig.qbee_segmentor_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(qbee_segmentor_sptr self) -> double"""
        return _qbee_swig.qbee_segmentor_sptr_relative_rate(self)


    def start(self):
        """start(qbee_segmentor_sptr self) -> bool"""
        return _qbee_swig.qbee_segmentor_sptr_start(self)


    def stop(self):
        """stop(qbee_segmentor_sptr self) -> bool"""
        return _qbee_swig.qbee_segmentor_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(qbee_segmentor_sptr self, unsigned int which_input) -> uint64_t"""
        return _qbee_swig.qbee_segmentor_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(qbee_segmentor_sptr self, unsigned int which_output) -> uint64_t"""
        return _qbee_swig.qbee_segmentor_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(qbee_segmentor_sptr self) -> int"""
        return _qbee_swig.qbee_segmentor_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(qbee_segmentor_sptr self, int m)"""
        return _qbee_swig.qbee_segmentor_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(qbee_segmentor_sptr self)"""
        return _qbee_swig.qbee_segmentor_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(qbee_segmentor_sptr self) -> bool"""
        return _qbee_swig.qbee_segmentor_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(qbee_segmentor_sptr self, int m)"""
        return _qbee_swig.qbee_segmentor_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(qbee_segmentor_sptr self) -> int"""
        return _qbee_swig.qbee_segmentor_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(qbee_segmentor_sptr self, int i) -> long"""
        return _qbee_swig.qbee_segmentor_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(qbee_segmentor_sptr self, long max_output_buffer)
        set_max_output_buffer(qbee_segmentor_sptr self, int port, long max_output_buffer)
        """
        return _qbee_swig.qbee_segmentor_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(qbee_segmentor_sptr self, int i) -> long"""
        return _qbee_swig.qbee_segmentor_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(qbee_segmentor_sptr self, long min_output_buffer)
        set_min_output_buffer(qbee_segmentor_sptr self, int port, long min_output_buffer)
        """
        return _qbee_swig.qbee_segmentor_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(qbee_segmentor_sptr self, int which) -> float
        pc_input_buffers_full(qbee_segmentor_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_segmentor_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(qbee_segmentor_sptr self, int which) -> float
        pc_input_buffers_full_avg(qbee_segmentor_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_segmentor_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(qbee_segmentor_sptr self, int which) -> float
        pc_input_buffers_full_var(qbee_segmentor_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_segmentor_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(qbee_segmentor_sptr self, int which) -> float
        pc_output_buffers_full(qbee_segmentor_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_segmentor_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(qbee_segmentor_sptr self, int which) -> float
        pc_output_buffers_full_avg(qbee_segmentor_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_segmentor_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(qbee_segmentor_sptr self, int which) -> float
        pc_output_buffers_full_var(qbee_segmentor_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_segmentor_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(qbee_segmentor_sptr self) -> float"""
        return _qbee_swig.qbee_segmentor_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(qbee_segmentor_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _qbee_swig.qbee_segmentor_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(qbee_segmentor_sptr self)"""
        return _qbee_swig.qbee_segmentor_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(qbee_segmentor_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _qbee_swig.qbee_segmentor_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(qbee_segmentor_sptr self) -> int"""
        return _qbee_swig.qbee_segmentor_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(qbee_segmentor_sptr self) -> int"""
        return _qbee_swig.qbee_segmentor_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(qbee_segmentor_sptr self, int priority) -> int"""
        return _qbee_swig.qbee_segmentor_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(qbee_segmentor_sptr self) -> std::string"""
        return _qbee_swig.qbee_segmentor_sptr_name(self)


    def symbol_name(self):
        """symbol_name(qbee_segmentor_sptr self) -> std::string"""
        return _qbee_swig.qbee_segmentor_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(qbee_segmentor_sptr self) -> io_signature_sptr"""
        return _qbee_swig.qbee_segmentor_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(qbee_segmentor_sptr self) -> io_signature_sptr"""
        return _qbee_swig.qbee_segmentor_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(qbee_segmentor_sptr self) -> long"""
        return _qbee_swig.qbee_segmentor_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(qbee_segmentor_sptr self) -> basic_block_sptr"""
        return _qbee_swig.qbee_segmentor_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(qbee_segmentor_sptr self, int ninputs, int noutputs) -> bool"""
        return _qbee_swig.qbee_segmentor_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(qbee_segmentor_sptr self) -> std::string"""
        return _qbee_swig.qbee_segmentor_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(qbee_segmentor_sptr self, std::string name)"""
        return _qbee_swig.qbee_segmentor_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(qbee_segmentor_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _qbee_swig.qbee_segmentor_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(qbee_segmentor_sptr self) -> swig_int_ptr"""
        return _qbee_swig.qbee_segmentor_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(qbee_segmentor_sptr self) -> swig_int_ptr"""
        return _qbee_swig.qbee_segmentor_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(qbee_segmentor_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _qbee_swig.qbee_segmentor_sptr_message_subscribers(self, which_port)

qbee_segmentor_sptr_swigregister = _qbee_swig.qbee_segmentor_sptr_swigregister
qbee_segmentor_sptr_swigregister(qbee_segmentor_sptr)


qbee_segmentor_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
qbee_segmentor = qbee_segmentor.make;

class qbee_framer(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of qbee::qbee_framer.

    To avoid accidental use of raw pointers, qbee::qbee_framer's constructor is in a private implementation class. qbee::qbee_framer::make is the public interface for creating new instances.

    Args:
        frame_tag_name : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frame_tag_name):
        """
        make(std::string const frame_tag_name) -> qbee_framer_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of qbee::qbee_framer.

        To avoid accidental use of raw pointers, qbee::qbee_framer's constructor is in a private implementation class. qbee::qbee_framer::make is the public interface for creating new instances.

        Args:
            frame_tag_name : 
        """
        return _qbee_swig.qbee_framer_make(frame_tag_name)

    make = staticmethod(make)
    __swig_destroy__ = _qbee_swig.delete_qbee_framer
    __del__ = lambda self: None
qbee_framer_swigregister = _qbee_swig.qbee_framer_swigregister
qbee_framer_swigregister(qbee_framer)

def qbee_framer_make(frame_tag_name):
    """
    qbee_framer_make(std::string const frame_tag_name) -> qbee_framer_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of qbee::qbee_framer.

    To avoid accidental use of raw pointers, qbee::qbee_framer's constructor is in a private implementation class. qbee::qbee_framer::make is the public interface for creating new instances.

    Args:
        frame_tag_name : 
    """
    return _qbee_swig.qbee_framer_make(frame_tag_name)

class qbee_framer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::qbee::qbee_framer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::qbee::qbee_framer)> self) -> qbee_framer_sptr
        __init__(boost::shared_ptr<(gr::qbee::qbee_framer)> self, qbee_framer p) -> qbee_framer_sptr
        """
        this = _qbee_swig.new_qbee_framer_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(qbee_framer_sptr self) -> qbee_framer"""
        return _qbee_swig.qbee_framer_sptr___deref__(self)

    __swig_destroy__ = _qbee_swig.delete_qbee_framer_sptr
    __del__ = lambda self: None

    def make(self, frame_tag_name):
        """
        make(qbee_framer_sptr self, std::string const frame_tag_name) -> qbee_framer_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of qbee::qbee_framer.

        To avoid accidental use of raw pointers, qbee::qbee_framer's constructor is in a private implementation class. qbee::qbee_framer::make is the public interface for creating new instances.

        Args:
            frame_tag_name : 
        """
        return _qbee_swig.qbee_framer_sptr_make(self, frame_tag_name)


    def history(self):
        """history(qbee_framer_sptr self) -> unsigned int"""
        return _qbee_swig.qbee_framer_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(qbee_framer_sptr self, int which, int delay)
        declare_sample_delay(qbee_framer_sptr self, unsigned int delay)
        """
        return _qbee_swig.qbee_framer_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(qbee_framer_sptr self, int which) -> unsigned int"""
        return _qbee_swig.qbee_framer_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(qbee_framer_sptr self) -> int"""
        return _qbee_swig.qbee_framer_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(qbee_framer_sptr self) -> double"""
        return _qbee_swig.qbee_framer_sptr_relative_rate(self)


    def start(self):
        """start(qbee_framer_sptr self) -> bool"""
        return _qbee_swig.qbee_framer_sptr_start(self)


    def stop(self):
        """stop(qbee_framer_sptr self) -> bool"""
        return _qbee_swig.qbee_framer_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(qbee_framer_sptr self, unsigned int which_input) -> uint64_t"""
        return _qbee_swig.qbee_framer_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(qbee_framer_sptr self, unsigned int which_output) -> uint64_t"""
        return _qbee_swig.qbee_framer_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(qbee_framer_sptr self) -> int"""
        return _qbee_swig.qbee_framer_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(qbee_framer_sptr self, int m)"""
        return _qbee_swig.qbee_framer_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(qbee_framer_sptr self)"""
        return _qbee_swig.qbee_framer_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(qbee_framer_sptr self) -> bool"""
        return _qbee_swig.qbee_framer_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(qbee_framer_sptr self, int m)"""
        return _qbee_swig.qbee_framer_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(qbee_framer_sptr self) -> int"""
        return _qbee_swig.qbee_framer_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(qbee_framer_sptr self, int i) -> long"""
        return _qbee_swig.qbee_framer_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(qbee_framer_sptr self, long max_output_buffer)
        set_max_output_buffer(qbee_framer_sptr self, int port, long max_output_buffer)
        """
        return _qbee_swig.qbee_framer_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(qbee_framer_sptr self, int i) -> long"""
        return _qbee_swig.qbee_framer_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(qbee_framer_sptr self, long min_output_buffer)
        set_min_output_buffer(qbee_framer_sptr self, int port, long min_output_buffer)
        """
        return _qbee_swig.qbee_framer_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(qbee_framer_sptr self, int which) -> float
        pc_input_buffers_full(qbee_framer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_framer_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(qbee_framer_sptr self, int which) -> float
        pc_input_buffers_full_avg(qbee_framer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_framer_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(qbee_framer_sptr self, int which) -> float
        pc_input_buffers_full_var(qbee_framer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_framer_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(qbee_framer_sptr self, int which) -> float
        pc_output_buffers_full(qbee_framer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_framer_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(qbee_framer_sptr self, int which) -> float
        pc_output_buffers_full_avg(qbee_framer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_framer_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(qbee_framer_sptr self, int which) -> float
        pc_output_buffers_full_var(qbee_framer_sptr self) -> pmt_vector_float
        """
        return _qbee_swig.qbee_framer_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(qbee_framer_sptr self) -> float"""
        return _qbee_swig.qbee_framer_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(qbee_framer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _qbee_swig.qbee_framer_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(qbee_framer_sptr self)"""
        return _qbee_swig.qbee_framer_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(qbee_framer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _qbee_swig.qbee_framer_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(qbee_framer_sptr self) -> int"""
        return _qbee_swig.qbee_framer_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(qbee_framer_sptr self) -> int"""
        return _qbee_swig.qbee_framer_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(qbee_framer_sptr self, int priority) -> int"""
        return _qbee_swig.qbee_framer_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(qbee_framer_sptr self) -> std::string"""
        return _qbee_swig.qbee_framer_sptr_name(self)


    def symbol_name(self):
        """symbol_name(qbee_framer_sptr self) -> std::string"""
        return _qbee_swig.qbee_framer_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(qbee_framer_sptr self) -> io_signature_sptr"""
        return _qbee_swig.qbee_framer_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(qbee_framer_sptr self) -> io_signature_sptr"""
        return _qbee_swig.qbee_framer_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(qbee_framer_sptr self) -> long"""
        return _qbee_swig.qbee_framer_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(qbee_framer_sptr self) -> basic_block_sptr"""
        return _qbee_swig.qbee_framer_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(qbee_framer_sptr self, int ninputs, int noutputs) -> bool"""
        return _qbee_swig.qbee_framer_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(qbee_framer_sptr self) -> std::string"""
        return _qbee_swig.qbee_framer_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(qbee_framer_sptr self, std::string name)"""
        return _qbee_swig.qbee_framer_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(qbee_framer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _qbee_swig.qbee_framer_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(qbee_framer_sptr self) -> swig_int_ptr"""
        return _qbee_swig.qbee_framer_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(qbee_framer_sptr self) -> swig_int_ptr"""
        return _qbee_swig.qbee_framer_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(qbee_framer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _qbee_swig.qbee_framer_sptr_message_subscribers(self, which_port)

qbee_framer_sptr_swigregister = _qbee_swig.qbee_framer_sptr_swigregister
qbee_framer_sptr_swigregister(qbee_framer_sptr)


qbee_framer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
qbee_framer = qbee_framer.make;



